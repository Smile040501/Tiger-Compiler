tcFail=2
spimFail=3
tailFail=4

function test_file {
    file=$1
    fileName=${file%%.*} # Filename without extension

    ./tc -F $file         # Run input file.tig
    if [ $? -ne 0 ]; then # If the program exited with an error
        echo $tcFail
        return 0
    fi

    spim -file "$fileName".s >"$fileName".so # Execute spim on the generated assembly file
    if [ $? -ne 0 ]; then                    # If the program exited with an error
        echo $spimFail
        return 0
    fi

    tail -n +6 "$fileName".so >"$fileName".o # Remove 1st 6 lines which are default generated by SPIM
    if [ $? -ne 0 ]; then                    # If the program exited with an error
        echo $tailFail
        return 0
    fi

    rm -rf "$fileName".so # Remove temp file

    local pass=0 # Whether test case passed or not

    diff -w "$fileName".o "$fileName".out &>/dev/null && pass=1 # Comparing files

    if [[ pass -ne 1 ]]; then # Test case passed
        echo $pass
    else
        rm -rf "$fileName".s "$fileName".o # Removing temp files
        echo $pass
    fi
}

if [[ "$1" != "" ]]; then
    # Tests single test case

    pass=$(test_file $1) # Run test case

    fileName=${file%%.*} # Filename without extension

    if [[ pass -eq 1 ]]; then
        echo "TEST PASSED :)"
        rm -rf "$fileName".s "$fileName".so "$fileName".o # Removing temp files
    elif [[ pass -eq $tcFail ]]; then
        echo "Couldn't execute Tiger binary on the input file"
    elif [[ pass -eq $spimFail ]]; then
        echo "Couldn't execute SPIM on the generated assembly file"
    elif [[ pass -eq $tailFail ]]; then
        echo "Error file using tail command"
    else
        echo "TEST FAILED :("
    fi
else
    # Tests all the test cases

    numTestCases=0  # Counter to keep track of test case number and total number of test cases
    passTestCases=0 # Counter to keep track of total number of test cases passed

    for file in "tests"/*.tig; do
        fileName=${file%%.*} # Filename without extension

        if [[ $fileName = "tests/custom" ]]; then # Don't check for custom test case
            continue
        fi

        ((++numTestCases)) # Increment the counter

        pass=$(test_file $file) # Run test case

        if [[ pass -eq 1 ]]; then
            echo "TEST $numTestCases: PASSED :)"
            rm -rf "$fileName".s "$fileName".so "$fileName".o # Removing temp files
            ((++passTestCases))                               # Increment the counter
        elif [[ pass -eq $tcFail ]]; then
            echo "TEST $numTestCases: Couldn't execute Tiger binary on the input file"
        elif [[ pass -eq $spimFail ]]; then
            echo "TEST $numTestCases: Couldn't execute SPIM on the generated assembly file"
        elif [[ pass -eq $tailFail ]]; then
            echo "TEST $numTestCases: Error file using tail command"
        else
            echo "TEST $numTestCases: FAILED :("
        fi
    done

    echo "TESTS PASSED: $passTestCases/$numTestCases"
fi
